# ==============================================================================
# SUINS INDEXER - ENVIRONMENT CONFIGURATION TEMPLATE
# ==============================================================================
# 
# Copy this file to .env and update the values according to your setup.
# All required variables must be set for the application to start.
# Optional variables have sensible defaults if not specified.
#
# For production deployment, ensure all sensitive values are properly secured.
# 
# ==============================================================================

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# PostgreSQL database connection string
# Format: postgresql://username:password@host:port/database_name
#
# Local development example:
DATABASE_URL=postgresql://postgres:password@localhost:5432/suins_indexer
#
# Production example (replace with your actual values):
# DATABASE_URL=postgresql://indexer_user:secure_password@db.example.com:5432/suins_indexer_prod
#
# Docker example:
# DATABASE_URL=postgresql://postgres:password@postgres_container:5432/suins_indexer

# ==============================================================================
# CETUS DEX CONFIGURATION
# ==============================================================================

# SUI/USDC Pool ID on Cetus DEX (REQUIRED)
# This is the specific liquidity pool address we're monitoring for trading activity
# Format: 0x + 64 hex characters (66 total)
# 
# Find the current pool ID from:
# - Cetus DEX interface at https://cetus.zone/
# - Cetus documentation
# - Block explorer searches for SUI/USDC pools
#
# Example (replace with actual pool ID):
SUI_USDC_POOL_ID=0x4e2ca1213d8584b7e98dfd60aede3b2c6571dc25bde5838a9efe8f809bde8a73

# Cetus Protocol Contract Address (REQUIRED)
# This is the main Cetus protocol address used to filter blockchain events
# Format: 64 hex characters (no 0x prefix)
#
# Find this from:
# - Cetus protocol documentation
# - Sui explorer under verified contracts
#
# Example (replace with actual Cetus address):
CETUS_ADDRESS=9e96e93cc7699b4e5d2b24ab4e9c3b5c6c43e0f8a9c6b2d9e4f6b8a1c3d5e7f9

# ==============================================================================
# PRICE FEED CONFIGURATION (Pyth Network)
# ==============================================================================

# USDC/USD Price Feed ID from Pyth Network (REQUIRED)
# Used to convert USDC amounts to USD for accurate calculations
# Format: 64 hex characters
#
# Find current price feed IDs at: https://pyth.network/developers/price-feed-ids
# USDC feed ID (verified):
USDC_PRICE_FEED_ID=eaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a

# SUI/USD Price Feed ID from Pyth Network (REQUIRED)
# Critical for converting SUI token amounts to USD for volume calculations
# Format: 64 hex characters
#
# SUI official price feed ID (verified):
SUI_PRICE_FEED_ID=23d7315113f5b1d3ba7a83604c44b94d79f4fd69af77f804fc7f920a6dc65744

# Pyth Network API Endpoint (OPTIONAL - has default)
# The API endpoint for fetching real-time price data
# Default: https://hermes.pyth.network/api/latest_price_feeds
#
# Options:
# - Mainnet (default): https://hermes.pyth.network/api/latest_price_feeds
# - Testnet: https://hermes-beta.pyth.network/api/latest_price_feeds
# - Custom endpoint (if you have one)
#
PYTH_API_URL=https://hermes.pyth.network/api/latest_price_feeds

# ==============================================================================
# OPERATIONAL SETTINGS
# ==============================================================================

# Update interval for metrics calculation (OPTIONAL)
# How often (in seconds) the background job updates volume/TVL metrics and saves to database
# Default: 600 seconds (10 minutes)
# Minimum recommended: 60 seconds (to avoid API rate limits)
# 
# Considerations:
# - Lower values = more real-time but higher API usage
# - Higher values = less real-time but more efficient
# - Pyth Network has rate limits, don't go below 60 seconds
#
UPDATE_INTERVAL_SECONDS=600

# Event retention period (OPTIONAL)
# How long (in hours) to keep events in memory for 24-hour calculations
# Default: 25 hours (provides buffer over 24h for accurate calculations)
# Minimum: 1 hour
#
# Considerations:
# - Must be > 24 hours for accurate 24h volume calculations
# - Higher values use more memory but provide better accuracy
# - Events older than this are automatically pruned
#
EVENT_RETENTION_HOURS=25

# Checkpoint batch size (OPTIONAL)
# How many checkpoints to process before forcing a database update
# Default: 10 checkpoints
# Range: 1-100
#
# Considerations:
# - Lower values = more frequent database writes, better persistence
# - Higher values = more efficient but risk losing data on crashes
# - Balance between performance and data safety
#
CHECKPOINT_BATCH_SIZE=10

# ==============================================================================
# SUI NETWORK CONFIGURATION (Optional)
# ==============================================================================

# Remote storage URL for downloading checkpoints (OPTIONAL)
# URL where Sui checkpoints can be downloaded from
# If not provided, assumes checkpoints are available locally
#
# Common options:
# - Mainnet: https://checkpoints.mainnet.sui.io
# - Testnet: https://checkpoints.testnet.sui.io
# - Devnet: https://checkpoints.devnet.sui.io
# - Custom archive service
#
# Leave commented out if checkpoints are stored locally:
# REMOTE_STORAGE=https://checkpoints.mainnet.sui.io

# Path to backfill progress tracking file (OPTIONAL)
# File path where the indexer tracks the last processed checkpoint
# Used to resume processing from the correct point after restarts
# Default: ./backfill_progress/backfill_progress
#
# The directory will be created automatically if it doesn't exist
# Ensure the application has write permissions to this location
#
BACKFILL_PROGRESS_FILE_PATH=./backfill_progress/backfill_progress

# ==============================================================================
# RUNTIME CONTROL
# ==============================================================================

# Enable/disable database functionality (OPTIONAL)
# Set to "true" for production, "false" for testing without database
# Default: true
#
# When set to false:
# - No database connections will be made
# - Metrics will be calculated but not persisted
# - Useful for testing or development without database setup
#
USE_DATABASE=true

# Directory where checkpoints are stored/downloaded (OPTIONAL)
# Local directory path for checkpoint storage
# Default: ./checkpoints
#
# Considerations:
# - Ensure sufficient disk space (checkpoints can be large)
# - Application needs read/write permissions
# - Can be on mounted network storage for shared access
#
CHECKPOINTS_DIR=./checkpoints

# ==============================================================================
# LOGGING CONFIGURATION (Optional)
# ==============================================================================

# Rust logging level (OPTIONAL)
# Controls the verbosity of application logs
# Options: error, warn, info, debug, trace
# Default: info
#
# Levels explained:
# - error: Only critical errors
# - warn: Warnings and errors
# - info: General operation info, warnings, and errors (recommended)
# - debug: Detailed debugging info (verbose)
# - trace: Very detailed tracing (very verbose, performance impact)
#
RUST_LOG=info

# ==============================================================================
# DEVELOPMENT/TESTING OPTIONS
# ==============================================================================

# Test mode flag (OPTIONAL - development only)
# Set to "true" to enable test mode with mock data
# Default: false
# WARNING: Only use in development/testing environments
#
# TEST_MODE=false

# Mock price feeds (OPTIONAL - development only)  
# Set to "true" to use mock prices instead of Pyth Network
# Useful when Pyth Network is unavailable or for testing
# Default: false
#
# USE_MOCK_PRICES=false

# ==============================================================================
# SECURITY NOTES
# ==============================================================================
#
# 1. Never commit .env files with real credentials to version control
# 2. Use strong, unique passwords for database connections
# 3. In production, consider using environment variable injection instead of .env files
# 4. Regularly rotate database passwords and API keys
# 5. Ensure proper network security for database connections
# 6. Monitor API usage to avoid rate limiting
#
# ==============================================================================

# ==============================================================================
# QUICK START CHECKLIST
# ==============================================================================
#
# Before running the indexer, ensure you have:
# 
# ✅ PostgreSQL database running and accessible
# ✅ Database user with proper permissions (CREATE, INSERT, UPDATE, SELECT)
# ✅ Valid SUI_USDC_POOL_ID from Cetus DEX  
# ✅ Valid CETUS_ADDRESS from Sui blockchain
# ✅ Internet connection for Pyth Network price feeds
# ✅ Sufficient disk space for checkpoints (if using local storage)
# ✅ Proper file permissions for progress tracking
#
# Test your configuration:
# 1. Run: cargo check (to verify code compilation)
# 2. Run: psql $DATABASE_URL -c "SELECT version();" (to test database)
# 3. Run: cargo run --bin cetus_checkpoint_processor (to start indexer)
#
# ============================================================================== 